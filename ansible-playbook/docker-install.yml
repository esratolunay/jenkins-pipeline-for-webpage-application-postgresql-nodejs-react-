- name: install docker
  hosts: development
  become: true
  tasks:
    - name: upgrade all packages
      ansible.builtin.yum: 
        name: '*'
        state: latest
    # we may need to uninstall any existing docker files from the centos repo first. 
    - name: Remove docker if installed from CentOS repo
      ansible.builtin.yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: removed

  # yum-utils is a collection of tools and programs for managing yum repositories, installing debug packages, source packages, extended information from repositories and administration.
    - name: Install yum utils
      ansible.builtin.yum:
        name: "{{ item }}"
        state: latest
      loop:
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
      - unzip

  # set up the repository (`yum_repository` modul can be used.)
    - name: Add Docker repo
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo

    - name: Install Docker
      ansible.builtin.package:
        name: docker-ce
        state: latest

    - name: Add user ec2-user to docker group
      ansible.builtin.user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Start Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    - name: install aws cli
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /home/ec2-user/awscliv2.zip

    - name: unzip zip file
      ansible.builtin.unarchive:
        src: /home/ec2-user/awscliv2.zip
        dest: /home/ec2-user
        remote_src: True

    - name: run the installer
      ansible.builtin.command:
      args:
        cmd: "./aws/install"
        creates: /usr/local/bin/aws

    - name: log in to AWS ec2-user
      ansible.builtin.shell: |
        export PATH=/usr/local/bin:$PATH
        source ~/.bash_profile
        aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ ecr_registry }}

- name: postgre database config
  hosts: postgresql
  become: true
  vars:
    container_name: postgre
    image_name: 078101540134.dkr.ecr.us-east-1.amazonaws.com/eso1/cw-todo-app:postgre
  tasks:
    - name: remove postgre container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: true

    - name: remove postgre image
      community.docker.docker_image:
        name: "{{ image_name }}"
        state: absent

    - name: Launch postgresql docker container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        ports:
          - "5432:5432"
        env:
          POSTGRES_PASSWORD: Pp123456789 #{{ POSTGRES_PASSWORD }}
        volumes:
          - /db-data:/var/lib/postgresql/data

- name: Nodejs Server configuration
  hosts: nodejs
  become: true
  vars:
    container_name: nodejs
    image_name: 078101540134.dkr.ecr.us-east-1.amazonaws.com/eso1/cw-todo-app:nodejs
  tasks:
    - name: remove postgre container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: true

    - name: remove postgre image
      community.docker.docker_image:
        name: "{{ image_name }}"
        state: absent

    - name: Launch postgresql docker container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        ports:
          - "5000:5000"

- name: React UI Server configuration
  hosts: react
  become: true
  vars:
    container_name: react
    image_name: 078101540134.dkr.ecr.us-east-1.amazonaws.com/eso1/cw-todo-app:react
  tasks:
    - name: remove postgre container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: true

    - name: remove postgre image
      community.docker.docker_image:
        name: "{{ image_name }}"
        state: absent

    - name: Launch react docker container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        ports:
          - "3000:3000"